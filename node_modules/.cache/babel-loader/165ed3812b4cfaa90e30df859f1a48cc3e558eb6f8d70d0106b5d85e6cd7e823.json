{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: []\n};\nconst allGameSlice = createSlice({\n  name: 'allGames',\n  initialState,\n  reducers: {\n    addGame: (state, action) => {\n      state.value = [...state.value, action.payload];\n    },\n    setGames: (state, action) => {\n      state.value = action.payload;\n    },\n    removeGame: (state, action) => {\n      state.value = state.value.filter(game => game.gid !== action.payload);\n    },\n    updateGame: (state, action) => {\n      state.value = state.value.map(game => {\n        return action.payload.gid === game.gid ? action.payload : game;\n      });\n    }\n  }\n});\nexport const {\n  addGame,\n  setGames,\n  removeGame,\n  updateGame\n} = allGameSlice.actions;\nexport const selectGames = state => state.allGames.value;\nexport default allGameSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","allGameSlice","name","reducers","addGame","state","action","payload","setGames","removeGame","filter","game","gid","updateGame","map","actions","selectGames","allGames","reducer"],"sources":["/Users/deewilliams/Developer/projects/nodwick-copy/src/slices/allGameSlice.tsx"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport {Game} from '../types.jsx';\n\ntype stateProps = {\n    value: Game[];\n}\n\nconst initialState:stateProps = {\n    value: []\n}\n\nconst allGameSlice = createSlice({\n    name: 'allGames',\n    initialState,\n    reducers: {\n        addGame: (state, action:{type:string, payload:Game}) => {\n            state.value = [...state.value, action.payload]\n        },\n\n        setGames: (state, action:{type:string, payload:Game[]}) => {\n            state.value = action.payload;\n        },\n        removeGame: (state, action:{type:string, payload:string}) => {\n            state.value = state.value.filter(game => game.gid !== action.payload)\n        },\n        updateGame: (state, action:{type:string, payload:Game}) => {\n            state.value = state.value.map((game:Game) => {\n                return(\n                    action.payload.gid === game.gid ?\n                    action.payload : \n                    game\n                )\n            })\n        }\n    }\n})\n\nexport const {addGame, setGames, removeGame, updateGame} = allGameSlice.actions;\nexport const selectGames = state => state.allGames.value;\nexport default allGameSlice.reducer;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAO5C,MAAMC,YAAuB,GAAG;EAC5BC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,YAAY,GAAGH,WAAW,CAAC;EAC7BI,IAAI,EAAE,UAAU;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAkC,KAAK;MACpDD,KAAK,CAACL,KAAK,GAAG,CAAC,GAAGK,KAAK,CAACL,KAAK,EAAEM,MAAM,CAACC,OAAO,CAAC;IAClD,CAAC;IAEDC,QAAQ,EAAEA,CAACH,KAAK,EAAEC,MAAoC,KAAK;MACvDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAChC,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKN,MAAM,CAACC,OAAO,CAAC;IACzE,CAAC;IACDM,UAAU,EAAEA,CAACR,KAAK,EAAEC,MAAkC,KAAK;MACvDD,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACc,GAAG,CAAEH,IAAS,IAAK;QACzC,OACIL,MAAM,CAACC,OAAO,CAACK,GAAG,KAAKD,IAAI,CAACC,GAAG,GAC/BN,MAAM,CAACC,OAAO,GACdI,IAAI;MAEZ,CAAC,CAAC;IACN;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACP,OAAO;EAAEI,QAAQ;EAAEC,UAAU;EAAEI;AAAU,CAAC,GAAGZ,YAAY,CAACc,OAAO;AAC/E,OAAO,MAAMC,WAAW,GAAGX,KAAK,IAAIA,KAAK,CAACY,QAAQ,CAACjB,KAAK;AACxD,eAAeC,YAAY,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}